openapi: 3.0.3
info:
  title: Hotel Booking API (Static Spec)
  version: "v1"
  description: >
    Static OpenAPI specification used to serve Swagger UI independently of springdoc's dynamic generator.
servers:
  - url: http://localhost:8080
security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]

    LoginResponse:
      type: object
      properties:
        token: { type: string }
        username: { type: string }
        roles:
          type: array
          items: { type: string }

    RegisterRequest:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        password: { type: string }
      required: [firstName, lastName, email, password]

    ProductResponseDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        city:
          type: object
          properties:
            id: { type: integer, format: int64 }
            name: { type: string }
        category:
          type: object
          properties:
            id: { type: integer, format: int64 }
            name: { type: string }
        featureIds:
          type: array
          items: { type: integer, format: int64 }
        featureSummaries:
          type: array
          items:
            type: object
            properties:
              id: { type: integer, format: int64 }
              name: { type: string }
              icon: { type: string }
        imageUrl: { type: string }

    ProductSearchResponse:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/ProductResponseDTO' }
        totalElements: { type: integer }
        totalPages: { type: integer }
        page: { type: integer }
        size: { type: integer }

    BookingRequestDTO:
      type: object
      properties:
        productId: { type: integer, format: int64 }
        customerId: { type: integer, format: int64 }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        notes: { type: string }
      required: [productId, customerId, startDate, endDate]

    BookingResponseDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        productId: { type: integer, format: int64 }
        customerId: { type: integer, format: int64 }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        status: { type: string, description: "BookingStatus enum" }
        notes: { type: string }

    ReviewRequestDTO:
      type: object
      properties:
        productId: { type: integer, format: int64 }
        rating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }
      required: [productId, rating]

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
      responses:
        "201": { description: Created }
        "400": { description: Bad Request }

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        "401": { description: Unauthorized }

  /api/auth/me:
    get:
      tags: [Auth]
      summary: Get current user profile
      security: [ { BearerAuth: [] } ]
      responses:
        "200": { description: OK }

  /api/products:
    get:
      tags: [Products]
      summary: List products
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductSearchResponse' }

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductResponseDTO' }
        "404": { description: Not Found }

  /api/products/search:
    get:
      tags: [Products]
      summary: Advanced product search
      parameters:
        - in: query
          name: categoryId
          schema: { type: integer, format: int64 }
        - in: query
          name: cityId
          schema: { type: integer, format: int64 }
        - in: query
          name: featureId
          schema: { type: integer, format: int64 }
        - in: query
          name: minPrice
          schema: { type: number, format: double }
        - in: query
          name: maxPrice
          schema: { type: number, format: double }
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductSearchResponse' }

  /api/bookings:
    post:
      tags: [Bookings]
      summary: Create booking (validates availability)
      security: [ { BearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BookingRequestDTO' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BookingResponseDTO' }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }

  /api/bookings/available:
    get:
      tags: [Bookings]
      summary: Check product availability in date range
      parameters:
        - in: query
          name: productId
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: startDate
          required: true
          schema: { type: string, format: date }
        - in: query
          name: endDate
          required: true
          schema: { type: string, format: date }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  available: { type: boolean }

  /api/favorites:
    get:
      tags: [Favorites]
      summary: List current user's favorites
      security: [ { BearerAuth: [] } ]
      responses:
        "200": { description: OK }

  /api/favorites/{productId}:
    post:
      tags: [Favorites]
      summary: Add favorite
      security: [ { BearerAuth: [] } ]
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }
    delete:
      tags: [Favorites]
      summary: Remove favorite
      security: [ { BearerAuth: [] } ]
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "204": { description: No Content }

  /api/reviews/product/{productId}:
    get:
      tags: [Reviews]
      summary: Get reviews by product
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }

  /api/reviews:
    post:
      tags: [Reviews]
      summary: Create review
      security: [ { BearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReviewRequestDTO' }
      responses:
        "201": { description: Created }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }

